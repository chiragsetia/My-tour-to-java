//palindrome

public class solution {
	 
	static boolean CheckPalindrome(long num) {
       if(num==0){
           return true;
       }else if(num%2==0)
       {
           return false;
       }
        String a=Long.toBinaryString(num);
        int i=0,j=a.length()-1;
        while(i<j){
            if(a.charAt(i)!=a.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
//         long n=num;
//         long sum=0L;
//         if(num==0){
//             return true;
//         }else if(num%2==0){
//             return false;
//         }
//         while(n>0){
//             sum=sum*10L+(num%10);
//             num=num/10;
//         }
//         if(n==sum){
//             return true;
//         }else 
//             return false;
	}

}


//set k bits
public class solution {
	static int SetAllBitsInRange(int num, int k){
		int t=1<<(k);
        t=t-1;
        num=num|t;
		return num;
	}
}


//range from l - r

public class solution {
	
	public static long ResetAllBitsInRange(long num, int l, int r) {
        long n=((1L<<l)-1L) ^ ((1L<<(r-1))-1L);
        
		num=num&(~n);        
		return num;
	}
}
