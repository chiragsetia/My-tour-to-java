/*The span si of a stockâ€™s price on a certain day i is the minimum number of consecutive days (up to the current day) the price of the stock has been less than its price on that ith day. If for a particular day, if no stock price is greater then just count the number of days till 0th day including current day.
For eg. if given price array is {3, 6, 8, 1, 2}, span for 4th day (which has price 2) is 2 because minimum count of consecutive days (including 4th day itself) from current day which has price less than 4th day is 2 (i.e. day 3 & 4). Similarly, span for 2nd day is 3 because no stock price in left is greater than 2nd day's price. So count is 3 till 0th day.
Given an input array with all stock prices, you need to return the array with corresponding spans of each day.*/
 
 
 
 
 
 public static int[] stockSpan(int[] price) {
        int [] arr=new int[price.length+1];
        int [] rArr=new int[price.length];
        int prv=0;
        for(int i=1;i<price.length+1;i++){
            if(price[i-1]>prv){
                arr[i]=1;
                int j=i-1;
                while(j>0&&price[i-1]>price[j-1]){
                    arr[i]+=arr[j];
                    j-=arr[j];
                }
            }else{
                arr[i]=1;
            }
            prv=price[i-1];
        rArr[i-1]=arr[i];
        }
        return rArr;
    }


/*Check redundant brackets
Level MEDIUM
Given a string mathematical expression, return true if redundant brackets are present in the expression. Brackets are redundant if there is nothing inside the bracket or more than one pair of brackets are present.
Assume the given string expression is balanced and contains only one type of bracket i.e. ().
Note: You will not get partial score for this problem. You will get marks only if all test cases are passed.

*/

import java.util.Stack;

public class solution {
	
	public static boolean checkRedundantBrackets(String input) {
		Stack<Character> s=new Stack<>();
        int flag=0;
        for(int i=0;i<input.length();i++){
            if(input.charAt(i)==')'){
                if(s.isEmpty()||s.peek()=='('){
                    return true;
                }
                while(!s.isEmpty()&&s.pop()!='(');
            }else{
                s.push(input.charAt(i));
            }
         
        }
        return false;
	}
}


/*Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
Please refer to Sample test case for more details.
*/

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
    	Scanner sc=new Scanner(System.in);
    	int n=sc.nextInt();
    	int arr[]=new int[n];
    	for (int i=0;i<n ;i++ ) {
    		arr[i]=sc.nextInt();
    	}
    	int s=firstNonZero(arr);
    	System.out.println(water(arr,s));
    }
    private static int firstNonZero(int arr[]){
    	int i;
    	for(i=0;i<arr.length;i++){
    		if(arr[i]!=0){
    			break;
    		}
    	}
    	return i;
    }
    private static int water(int arr[], int s){
    	if(s>=arr.length){
    		return 0;
    	}
    	int large=s+1;
    	for(int i=s+1;i<arr.length;i++){
    		if(arr[s]<arr[i]){
    			large=i;
    			break;
    		}else if(arr[i]>arr[large]){
    			large=i;
    		}
    	}
    	int sum=0;
    	if(large-s==1){
    		return water(arr,large);
    	}
    	int min =Math.min(arr[s],arr[large]);
    	for(int i=s+1;i<large;i++){
    		sum+=min-arr[i];
    	}
    	int anotherSum=water(arr,large);
    	return sum+anotherSum;
    }

}



/*Interview Shuriken 8: Longest Substring
Level HARD
This problem was asked by Amazon.
Given an integer k and a string s, find the length of the longest substring that contains at most k distinct characters.
For example, given s = "abcba" and k = 2, the longest substring with k distinct characters is "bcb".
Follow up: Can you do it in O(n)
*/

public class Main {

	
	public static void main(String[] args) {
		/* Your class should be named Main.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/

		// Write your code here
        Scanner sc =new Scanner(System.in);
        int k=sc.nextInt();
        String s=sc.next();
        System.out.println(longestSubstring(s,k));
	}
   private static int longestSubstring(String s, int k){
        int i=0;
        int j=0;
        int max=0;
       // String maxS="";
        HashMap<Character,Integer> set=new HashMap<>();
        set.put(s.charAt(0),1); 
        while(j<s.length()){
            if(set.size()==k){
                //System.out.println("equal");
                if((j-i+1)>max){
                    max=j-i+1;
                    //maxS=s.substring(i,j+1);
                }
            }
            if(set.size()>k){
                if(set.get(s.charAt(i))>1){
                    set.put(s.charAt(i),set.get(s.charAt(i))-1);
                }else{
                    set.remove(s.charAt(i));
                }
                i++;
            }
            else{
               // System.out.println(set);
                j++;
                if(j==s.length()){
                    return max;
                }
                if(set.containsKey(s.charAt(j))){
                    set.put(s.charAt(j),set.get(s.charAt(j))+1);
                }else{
                    set.put(s.charAt(j),1);
                }
            }
        }
        return(max);
    }

}




/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
 
 
 
 //add in reverse
public class Solution {
    public ListNode addTwoNumbers(ListNode A, ListNode B) {
        ListNode head=new ListNode(0);
        ListNode uH=head;
        int c=0;
        while(A!=null&&B!=null){
            int s=A.val+B.val+c;
            c=0;
            if(s>9){
                c=1;
                s=s%10;
            }
            ListNode temp=new ListNode(s);
            uH.next=temp;
            uH=uH.next;
            A=A.next;
            B=B.next;
        }
        while(A!=null){
            int s=A.val+c;
            c=0;
             if(s>9){
                c=1;
                s=s%10;
            }
            ListNode temp=new ListNode(s);
            uH.next=temp;
            uH=uH.next;
            A=A.next;
        }
        while(B!=null){
            int s=B.val+c;
            c=0;
             if(s>9){
                c=1;
                s=s%10;
            }
            ListNode temp=new ListNode(s);
            uH.next=temp;
            uH=uH.next;
            B=B.next;
        }
        if(c==1){
            ListNode temp=new ListNode(c);
            uH.next=temp;
            uH=uH.next;
        }
        return head.next;
    }
}

